{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","key","timeStamp","className","type","checked","done","onChange","selectMultiple","text","onClick","deleteItem","icon","faTrash","length","deleteMultiple","App","handleNewitemChange","event","setState","newItem","target","value","addNewItem","preventDefault","state","trim","newToDoItems","toDoItems","Date","now","filter","class","id","onSubmit","this","placeholder","faPlusCircle","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAgDeA,MA1Cf,SAAmBC,GACf,IAAMC,EAAYD,EAAME,MAAMC,KAAI,SAAAC,GAC9B,OACI,yBAAKC,IAAKD,EAAKE,UAAWC,UAAU,WAChC,yBAAKA,UAAU,YACX,2BACIC,KAAK,WACLC,QAASL,EAAKM,KACdC,SAAU,kBAAMX,EAAMY,eAAeR,EAAKE,cAE1C,uBAAGC,UAAU,eAAeH,EAAKS,OAEzC,4BACIN,UAAU,mBACVO,QAAS,kBAAMd,EAAMe,WAAWX,EAAKE,aACjC,kBAAC,IAAD,CAAiBU,KAAMC,WAQ3C,OACI,yBAAKV,UAAW,aAEY,IAAvBP,EAAME,MAAMgB,OAAe,0EAAoDjB,EAExD,IAAvBD,EAAME,MAAMgB,QACT,yBAAKX,UAAU,eACX,4BACIA,UAAU,kBACVO,QAASd,EAAMmB,gBACX,kBAAC,IAAD,CAAiBH,KAAMC,MAH/B,iCC3BCG,G,wDACnB,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IAORqB,oBAAsB,SAAAC,GACpB,EAAKC,SAAS,CAACC,QAASF,EAAMG,OAAOC,SATrB,EAYlBC,WAAa,SAAAL,GACXA,EAAMM,iBAEN,IAAMJ,EAAU,EAAKK,MAAML,QAAQM,OAEnC,GAAe,KAAZN,EAAe,CAChB,IAAMO,EAAY,sBAAO,EAAKF,MAAMG,WAAlB,CAA6B,CAACnB,KAAMW,EAASd,MAAM,EAAOJ,UAAW2B,KAAKC,SAE5F,EAAKX,SAAS,CAACS,UAAWD,EAAcP,QAAQ,OApBlC,EAwBlBZ,eAAiB,SAAAN,GACf,IAAMyB,EAAe,YAAI,EAAKF,MAAMG,WAAW7B,KAAI,SAAAC,GAIjD,OAHGA,EAAKE,YAAcA,IACpBF,EAAKM,MAAQN,EAAKM,MAEbN,KAGT,EAAKmB,SAAS,CAACS,UAAWD,KAhCV,EAmClBhB,WAAa,SAAAT,GACX,IAAMyB,EAAe,YAAI,EAAKF,MAAMG,WAAWG,QAAO,SAAA/B,GACpD,OAAOA,EAAKE,YAAcA,KAG5B,EAAKiB,SAAS,CAACS,UAAWD,KAxCV,EA4ClBZ,eAAiB,WACf,IAAMY,EAAe,EAAKF,MAAMG,UAAUG,QAAQ,SAAA/B,GAChD,OAAQA,EAAKM,QAGf,EAAKa,SAAS,CAACS,UAAWD,KA/C1B,EAAKF,MAAQ,CACXG,UAAW,GACXR,QAAS,IAJK,E,qDAuDhB,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,UAChB,wBAAI6B,MAAM,UAAV,eAEF,0BAAMC,GAAG,aAAaC,SAAUC,KAAKZ,YACnC,yBAAKpB,UAAU,oBACb,yBAAKA,UAAU,kBACb,2BACAA,UAAU,QACViC,YAAY,kBACZ7B,SAAU4B,KAAKlB,oBACfK,MAAOa,KAAKV,MAAML,WAGpB,6BACE,4BAAQjB,UAAU,aAClB,kBAAC,IAAD,CAAiBS,KAAMyB,UAK7B,kBAAC,EAAD,CAAWvC,MAAOqC,KAAKV,MAAMG,UAC7BpB,eAAgB2B,KAAK3B,eACrBG,WAAYwB,KAAKxB,WACjBI,eAAgBoB,KAAKpB,sB,GAjFIuB,cCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7ded3c5.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nfunction ListItems(props){\n    const listItems = props.items.map(item => {\n        return (\n            <div key={item.timeStamp} className=\"toDoRow\">\n                <div className=\"toDoText\">\n                    <input\n                        type=\"checkbox\"\n                        checked={item.done}\n                        onChange={() => props.selectMultiple(item.timeStamp)}\n                        />\n                        <p className=\"toDoMessage\">{item.text}</p>\n                </div>\n                <button\n                    className=\"deleteToDoButton\"\n                    onClick={() => props.deleteItem(item.timeStamp)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                        {/* X */}\n                    </button>\n            </div>\n        );\n    });\n\n\n    return (\n        <nav className= \"itemPanel\">\n\n            {props.items.length === 0 ? <p>You don't have anything in your To-Do List!</p>: listItems}\n\n            {props.items.length !== 0 && (\n                <div className=\"panel-block\">\n                    <button\n                        className=\"deleteAllButton\" \n                        onClick={props.deleteMultiple}>\n                            <FontAwesomeIcon icon={faTrash}/> &nbsp; Delete All Selected!\n                            {/* Delete All Selected! */}\n                    </button>\n                </div>\n            )}\n        </nav>\n    );\n}\n\nexport default ListItems","import React, {Component} from 'react';\nimport './App.css';\nimport ListItems from './ListItems.js';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\n\nimport \"./style.css\";\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      toDoItems: [],\n      newItem: \"\"\n    };\n  }\n\n  handleNewitemChange = event => {\n    this.setState({newItem: event.target.value});\n  };\n\n  addNewItem = event  => {\n    event.preventDefault();\n\n    const newItem = this.state.newItem.trim();\n\n    if(newItem !== \"\"){\n      const newToDoItems = [...this.state.toDoItems, {text: newItem, done: false, timeStamp: Date.now()}];\n      \n      this.setState({toDoItems: newToDoItems, newItem:\"\"});\n    }\n  };\n\n  selectMultiple = timeStamp => {\n    const newToDoItems = [...this.state.toDoItems].map(item => {\n      if(item.timeStamp === timeStamp){\n        item.done = !item.done;\n      }\n      return item;\n    })\n\n    this.setState({toDoItems: newToDoItems});\n  }\n\n  deleteItem = timeStamp => {\n    const newToDoItems = [...this.state.toDoItems].filter(item => {\n      return item.timeStamp !== timeStamp;\n    });\n\n    this.setState({toDoItems: newToDoItems});\n    \n  }\n\n  deleteMultiple = () => {\n    const newToDoItems = this.state.toDoItems.filter( item => {\n      return !item.done; \n    });\n\n    this.setState({toDoItems: newToDoItems});\n  }\n  \n\n  render(){\n\n    return(\n      <div className=\"App\">\n        <header className=\"header\">\n          <h1 class=\"tittle\">To-Do List</h1>\n        </header>\n        <form id=\"to-do-form\" onSubmit={this.addNewItem}>\n          <div className=\"addItemContainer\">\n            <div className=\"inputcontainer\">\n              <input \n              className=\"input\"\n              placeholder=\"Add a new to-do\" \n              onChange={this.handleNewitemChange}\n              value={this.state.newItem}\n              />\n            </div>\n            <div>\n              <button className=\"addButton\">\n              <FontAwesomeIcon icon={faPlusCircle} />\n              </button>\n            </div>\n          </div>\n        </form>\n        <ListItems items={this.state.toDoItems} \n        selectMultiple={this.selectMultiple} \n        deleteItem={this.deleteItem}\n        deleteMultiple={this.deleteMultiple}\n        />\n      </div>\n    );\n  }\n\n\n\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}